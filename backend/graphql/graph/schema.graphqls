type Query {
    GetPaths: [Path!]!
    GetPicture(input: SearchFilter): Picture!
    GetPictures(input: SearchFilter): [Picture!]!
}

input SearchFilter {
    pathContains: String
}

type Mutation {
    AddPath(input: NewPath!): Path!
    DeletePath(input: DeletePath!): Boolean!
    ScanPath: Boolean!
    AddToRating(pictureId: Int!): Picture!
    CreateMatch(input: SearchFilter): Match!
    ReportMatchResult(input: MatchResult!): Boolean!
}

input MatchResult {
    winnerId: Int!
    loserId: Int!
}

type Match {
    playerOne: Picture!
    playerTwo: Picture!
}

input NewPath {
    path: String!
}

input DeletePath {
    pathId: Int!
}

type Path {
    id: Int!
    path: String!
    createdAt: String!
    updatedAt: String!
}

type Picture {
    id:        Int!
    path:      String!
    ext:       String!
    views:     Int!
    likes:     Int!
    rating:    Float!
    deviation: Float!
    wins:      Int!
    losses:    Int!
    createdAt:   String!
    updatedAt:   String!
}
