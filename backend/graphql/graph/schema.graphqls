 type Query {
    GetPaths: [Path!]!
    GetPicture(input: SearchFilter): Picture!
     GetPictures(input: SearchFilter): [Picture!]
     CreateMatch(input: SearchFilter): Match!
}

 input SearchFilter {
     take: Int
     skip: Int
     pathContains: String
     upperRating: Int
     lowerRating: Int
     sortOrder: SortOrder
 }

 enum SortOrder {
     RANDOM
     RATING_DESC
     RATING_ASC
 }

 type Mutation {
     AddPath(input: NewPath!): Path!
     DeletePath(pathId: Int!): Boolean!
     ScanPaths: Boolean!
     AddToRating(pictureId: Int!): Picture!
     LikePicture(pictureId: Int!): Boolean!
     DislikePicture(pictureId: Int!): Boolean!
     ReportMatchResult(input: MatchResult!): Boolean!
 }

input MatchResult {
    winnerId: Int!
    loserId: Int!
}

type Match {
    playerOne: Picture!
    playerTwo: Picture!
}

input NewPath {
    path: String!
}

input DeletePath {
    pathId: Int!
}

type Path {
    id: Int!
    path: String!
    createdAt: String!
    updatedAt: String!
}

type Picture {
    id:        Int!
    path:      String!
    ext:       String!
    views:     Int!
    likes:     Int!
    rating:    Float!
    deviation: Float!
    wins:      Int!
    losses:    Int!
    createdAt:   String!
    updatedAt:   String!
}