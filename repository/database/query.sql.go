// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package database

import (
	"context"
)

const createPath = `-- name: CreatePath :one
INSERT INTO paths (path, created, updated)
VALUES ($1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, path, created, updated
`

func (q *Queries) CreatePath(ctx context.Context, path string) (Path, error) {
	row := q.db.QueryRowContext(ctx, createPath, path)
	var i Path
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deletePath = `-- name: DeletePath :exec
DELETE
FROM paths
WHERE id = $1
`

func (q *Queries) DeletePath(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePath, id)
	return err
}

const getPathByID = `-- name: GetPathByID :one
SELECT id, path, created, updated
FROM paths
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPathByID(ctx context.Context, id int64) (Path, error) {
	row := q.db.QueryRowContext(ctx, getPathByID, id)
	var i Path
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getPaths = `-- name: GetPaths :many
SELECT id, path, created, updated
FROM paths
ORDER BY path
`

func (q *Queries) GetPaths(ctx context.Context) ([]Path, error) {
	rows, err := q.db.QueryContext(ctx, getPaths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Path
	for rows.Next() {
		var i Path
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPictureByFilter = `-- name: GetPictureByFilter :one
SELECT id, path, ext, views, likes, rating, deviation, wins, losses, created, updated
FROM pictures
WHERE path LIKE '%' + $1 + '%'
LIMIT 1
`

func (q *Queries) GetPictureByFilter(ctx context.Context, dollar_1 interface{}) (Picture, error) {
	row := q.db.QueryRowContext(ctx, getPictureByFilter, dollar_1)
	var i Picture
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.Ext,
		&i.Views,
		&i.Likes,
		&i.Rating,
		&i.Deviation,
		&i.Wins,
		&i.Losses,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getPictureByID = `-- name: GetPictureByID :one
SELECT id, path, ext, views, likes, rating, deviation, wins, losses, created, updated
FROM pictures
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPictureByID(ctx context.Context, id int64) (Picture, error) {
	row := q.db.QueryRowContext(ctx, getPictureByID, id)
	var i Picture
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.Ext,
		&i.Views,
		&i.Likes,
		&i.Rating,
		&i.Deviation,
		&i.Wins,
		&i.Losses,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getPicturesByFilter = `-- name: GetPicturesByFilter :many
SELECT id, path, ext, views, likes, rating, deviation, wins, losses, created, updated
FROM pictures
WHERE path LIKE '%' + $1 + '%'
`

func (q *Queries) GetPicturesByFilter(ctx context.Context, dollar_1 interface{}) ([]Picture, error) {
	rows, err := q.db.QueryContext(ctx, getPicturesByFilter, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Picture
	for rows.Next() {
		var i Picture
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.Ext,
			&i.Views,
			&i.Likes,
			&i.Rating,
			&i.Deviation,
			&i.Wins,
			&i.Losses,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
